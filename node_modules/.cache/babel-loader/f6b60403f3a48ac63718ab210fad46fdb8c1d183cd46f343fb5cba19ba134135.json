{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useEvents = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    const storedEvents = localStorage.getItem('events');\n    if (storedEvents) {\n      setEvents(JSON.parse(storedEvents));\n    }\n  }, []);\n  const generateRecurringEvents = event => {\n    const {\n      start,\n      end,\n      recurrence,\n      title,\n      color\n    } = event;\n    const startDate = new Date(start);\n    const endDate = new Date(end);\n    const duration = endDate - startDate;\n    const recurringEvents = [{\n      ...event,\n      id: event.id || Date.now().toString(),\n      date: startDate.toISOString().split('T')[0]\n    }];\n    if (recurrence === 'none') {\n      return recurringEvents;\n    }\n    const maxDate = new Date();\n    maxDate.setFullYear(maxDate.getFullYear() + 1); // Generate events for next year\n\n    let currentDate = new Date(startDate);\n\n    // For weekly recurrence, ensure we start from the same day of the week\n    if (recurrence === 'weekly') {\n      currentDate.setDate(currentDate.getDate() + 7);\n    } else {\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    while (currentDate < maxDate) {\n      const newStart = new Date(currentDate);\n      const newEnd = new Date(newStart.getTime() + duration);\n      recurringEvents.push({\n        ...event,\n        id: `${event.id || Date.now().toString()}_${newStart.toISOString()}`,\n        title,\n        color,\n        start: newStart.toISOString(),\n        end: newEnd.toISOString(),\n        date: newStart.toISOString().split('T')[0],\n        recurrence\n      });\n      switch (recurrence) {\n        case 'daily':\n          currentDate.setDate(currentDate.getDate() + 1);\n          break;\n        case 'weekly':\n          currentDate.setDate(currentDate.getDate() + 7);\n          break;\n        case 'monthly':\n          currentDate.setMonth(currentDate.getMonth() + 1);\n          break;\n        default:\n          break;\n      }\n    }\n    return recurringEvents;\n  };\n  const addEvent = event => {\n    // Ensure all required fields are present\n    const completeEvent = {\n      ...event,\n      color: event.color || '#e0e0e0',\n      recurrence: event.recurrence || 'none'\n    };\n    const recurringEvents = generateRecurringEvents(completeEvent);\n    const newEvents = [...events, ...recurringEvents];\n    setEvents(newEvents);\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  const updateEvent = (eventId, updatedEvent) => {\n    // Remove all instances of the recurring event\n    const baseId = eventId.split('_')[0];\n    const filteredEvents = events.filter(event => !event.id.startsWith(baseId));\n\n    // Add the updated event with new recurring instances\n    const recurringEvents = generateRecurringEvents({\n      ...updatedEvent,\n      id: baseId\n    });\n    const newEvents = [...filteredEvents, ...recurringEvents];\n    setEvents(newEvents);\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  const deleteEvent = eventId => {\n    // Remove all instances of the recurring event\n    const baseId = eventId.split('_')[0];\n    const newEvents = events.filter(event => !event.id.startsWith(baseId));\n    setEvents(newEvents);\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  return {\n    events,\n    addEvent,\n    updateEvent,\n    deleteEvent\n  };\n};\n_s(useEvents, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\nexport default useEvents;","map":{"version":3,"names":["useState","useEffect","useEvents","_s","events","setEvents","storedEvents","localStorage","getItem","JSON","parse","generateRecurringEvents","event","start","end","recurrence","title","color","startDate","Date","endDate","duration","recurringEvents","id","now","toString","date","toISOString","split","maxDate","setFullYear","getFullYear","currentDate","setDate","getDate","newStart","newEnd","getTime","push","setMonth","getMonth","addEvent","completeEvent","newEvents","setItem","stringify","updateEvent","eventId","updatedEvent","baseId","filteredEvents","filter","startsWith","deleteEvent"],"sources":["D:/react/reactjs/src/hooks/useEvents.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useEvents = () => {\r\n  const [events, setEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const storedEvents = localStorage.getItem('events');\r\n    if (storedEvents) {\r\n      setEvents(JSON.parse(storedEvents));\r\n    }\r\n  }, []);\r\n\r\n  const generateRecurringEvents = (event) => {\r\n    const { start, end, recurrence, title, color } = event;\r\n    const startDate = new Date(start);\r\n    const endDate = new Date(end);\r\n    const duration = endDate - startDate;\r\n    const recurringEvents = [{\r\n      ...event,\r\n      id: event.id || Date.now().toString(),\r\n      date: startDate.toISOString().split('T')[0]\r\n    }];\r\n\r\n    if (recurrence === 'none') {\r\n      return recurringEvents;\r\n    }\r\n\r\n    const maxDate = new Date();\r\n    maxDate.setFullYear(maxDate.getFullYear() + 1); // Generate events for next year\r\n\r\n    let currentDate = new Date(startDate);\r\n    \r\n    // For weekly recurrence, ensure we start from the same day of the week\r\n    if (recurrence === 'weekly') {\r\n      currentDate.setDate(currentDate.getDate() + 7);\r\n    } else {\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n\r\n    while (currentDate < maxDate) {\r\n      const newStart = new Date(currentDate);\r\n      const newEnd = new Date(newStart.getTime() + duration);\r\n\r\n      recurringEvents.push({\r\n        ...event,\r\n        id: `${event.id || Date.now().toString()}_${newStart.toISOString()}`,\r\n        title,\r\n        color,\r\n        start: newStart.toISOString(),\r\n        end: newEnd.toISOString(),\r\n        date: newStart.toISOString().split('T')[0],\r\n        recurrence\r\n      });\r\n\r\n      switch (recurrence) {\r\n        case 'daily':\r\n          currentDate.setDate(currentDate.getDate() + 1);\r\n          break;\r\n        case 'weekly':\r\n          currentDate.setDate(currentDate.getDate() + 7);\r\n          break;\r\n        case 'monthly':\r\n          currentDate.setMonth(currentDate.getMonth() + 1);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return recurringEvents;\r\n  };\r\n\r\n  const addEvent = (event) => {\r\n    // Ensure all required fields are present\r\n    const completeEvent = {\r\n      ...event,\r\n      color: event.color || '#e0e0e0',\r\n      recurrence: event.recurrence || 'none'\r\n    };\r\n\r\n    const recurringEvents = generateRecurringEvents(completeEvent);\r\n    const newEvents = [...events, ...recurringEvents];\r\n    setEvents(newEvents);\r\n    localStorage.setItem('events', JSON.stringify(newEvents));\r\n  };\r\n\r\n  const updateEvent = (eventId, updatedEvent) => {\r\n    // Remove all instances of the recurring event\r\n    const baseId = eventId.split('_')[0];\r\n    const filteredEvents = events.filter(event => !event.id.startsWith(baseId));\r\n    \r\n    // Add the updated event with new recurring instances\r\n    const recurringEvents = generateRecurringEvents({\r\n      ...updatedEvent,\r\n      id: baseId\r\n    });\r\n    \r\n    const newEvents = [...filteredEvents, ...recurringEvents];\r\n    setEvents(newEvents);\r\n    localStorage.setItem('events', JSON.stringify(newEvents));\r\n  };\r\n\r\n  const deleteEvent = (eventId) => {\r\n    // Remove all instances of the recurring event\r\n    const baseId = eventId.split('_')[0];\r\n    const newEvents = events.filter(event => !event.id.startsWith(baseId));\r\n    setEvents(newEvents);\r\n    localStorage.setItem('events', JSON.stringify(newEvents));\r\n  };\r\n\r\n  return { events, addEvent, updateEvent, deleteEvent };\r\n};\r\n\r\nexport default useEvents;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}