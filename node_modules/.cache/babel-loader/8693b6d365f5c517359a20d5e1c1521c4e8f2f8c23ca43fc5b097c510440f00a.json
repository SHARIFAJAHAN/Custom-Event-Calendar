{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\reactjs\\\\src\\\\components\\\\Calendar.jsx\";\nimport React from 'react';\nimport DayCell from './DayCell';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  currentDate,\n  events,\n  onDayClick,\n  onEventClick,\n  updateEvent\n}) => {\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\n  const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();\n  const renderDays = () => {\n    const days = [];\n\n    // Add empty cells for days before the first day of the month\n    for (let i = 0; i < firstDayOfMonth; i++) {\n      days.push(/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day-cell empty\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day-number\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 11\n        }, this)\n      }, `empty-${i}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this));\n    }\n\n    // Add cells for each day of the month\n    for (let day = 1; day <= daysInMonth; day++) {\n      const dayDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\n      const dayString = dayDate.toISOString().split('T')[0];\n      days.push(/*#__PURE__*/_jsxDEV(DayCell, {\n        day: dayDate,\n        dayString: dayString,\n        events: events.filter(event => event.date === dayString),\n        onClick: () => onDayClick(dayDate),\n        onEventClick: onEventClick\n      }, dayString, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this));\n    }\n    return days;\n  };\n  const onDragEnd = result => {\n    const {\n      source,\n      destination\n    } = result;\n    if (!destination) return;\n    const destDay = destination.droppableId;\n    const destDate = new Date(destDay);\n\n    // Only allow drop if destDay is in the current month\n    if (destDate.getMonth() !== currentDate.getMonth() || destDate.getFullYear() !== currentDate.getFullYear()) {\n      return; // Ignore drops outside the current month\n    }\n    const eventId = result.draggableId;\n    const event = events.find(e => e.id === eventId);\n\n    // Check for conflicts\n    const newStart = new Date(destDay);\n    newStart.setHours(new Date(event.start).getHours(), new Date(event.start).getMinutes());\n    const newEnd = new Date(destDay);\n    newEnd.setHours(new Date(event.end).getHours(), new Date(event.end).getMinutes());\n    const hasConflict = events.some(e => {\n      if (e.id === eventId) return false;\n      return newStart < new Date(e.end) && newEnd > new Date(e.start);\n    });\n    if (hasConflict) {\n      alert('Event conflict detected!');\n      return;\n    }\n\n    // Update event\n    const updatedEvent = {\n      ...event,\n      start: newStart.toISOString(),\n      end: newEnd.toISOString(),\n      date: destDay\n    };\n    updateEvent(eventId, updatedEvent);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar\",\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"calendar-grid\",\n        children: renderDays()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_c = Calendar;\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","DayCell","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","Calendar","currentDate","events","onDayClick","onEventClick","updateEvent","daysInMonth","Date","getFullYear","getMonth","getDate","firstDayOfMonth","getDay","renderDays","days","i","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","day","dayDate","dayString","toISOString","split","filter","event","date","onClick","onDragEnd","result","source","destination","destDay","droppableId","destDate","eventId","draggableId","find","e","id","newStart","setHours","start","getHours","getMinutes","newEnd","end","hasConflict","some","alert","updatedEvent","_c","$RefreshReg$"],"sources":["D:/react/reactjs/src/components/Calendar.jsx"],"sourcesContent":["import React from 'react';\r\nimport DayCell from './DayCell';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst Calendar = ({ currentDate, events, onDayClick, onEventClick, updateEvent }) => {\r\n  const daysInMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0).getDate();\r\n  const firstDayOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1).getDay();\r\n\r\n  const renderDays = () => {\r\n    const days = [];\r\n    \r\n    // Add empty cells for days before the first day of the month\r\n    for (let i = 0; i < firstDayOfMonth; i++) {\r\n      days.push(\r\n        <div key={`empty-${i}`} className=\"day-cell empty\">\r\n          <div className=\"day-number\"></div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Add cells for each day of the month\r\n    for (let day = 1; day <= daysInMonth; day++) {\r\n      const dayDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);\r\n      const dayString = dayDate.toISOString().split('T')[0];\r\n      days.push(\r\n        <DayCell\r\n          key={dayString}\r\n          day={dayDate}\r\n          dayString={dayString}\r\n          events={events.filter(event => event.date === dayString)}\r\n          onClick={() => onDayClick(dayDate)}\r\n          onEventClick={onEventClick}\r\n        />\r\n      );\r\n    }\r\n\r\n    return days;\r\n  };\r\n\r\n  const onDragEnd = (result) => {\r\n    const { source, destination } = result;\r\n    if (!destination) return;\r\n\r\n    const destDay = destination.droppableId;\r\n    const destDate = new Date(destDay);\r\n\r\n    // Only allow drop if destDay is in the current month\r\n    if (\r\n      destDate.getMonth() !== currentDate.getMonth() ||\r\n      destDate.getFullYear() !== currentDate.getFullYear()\r\n    ) {\r\n      return; // Ignore drops outside the current month\r\n    }\r\n\r\n    const eventId = result.draggableId;\r\n    const event = events.find(e => e.id === eventId);\r\n\r\n    // Check for conflicts\r\n    const newStart = new Date(destDay);\r\n    newStart.setHours(new Date(event.start).getHours(), new Date(event.start).getMinutes());\r\n    const newEnd = new Date(destDay);\r\n    newEnd.setHours(new Date(event.end).getHours(), new Date(event.end).getMinutes());\r\n\r\n    const hasConflict = events.some(e => {\r\n      if (e.id === eventId) return false;\r\n      return (newStart < new Date(e.end) && newEnd > new Date(e.start));\r\n    });\r\n\r\n    if (hasConflict) {\r\n      alert('Event conflict detected!');\r\n      return;\r\n    }\r\n\r\n    // Update event\r\n    const updatedEvent = {\r\n      ...event,\r\n      start: newStart.toISOString(),\r\n      end: newEnd.toISOString(),\r\n      date: destDay\r\n    };\r\n    updateEvent(eventId, updatedEvent);\r\n  };\r\n\r\n  return (\r\n    <div className=\"calendar\">\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <div className=\"calendar-grid\">\r\n          {renderDays()}\r\n        </div>\r\n      </DragDropContext>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}