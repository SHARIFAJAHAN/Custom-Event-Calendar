{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useEvents = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    const storedEvents = localStorage.getItem('events');\n    if (storedEvents) {\n      setEvents(JSON.parse(storedEvents));\n    }\n  }, []);\n  const generateRecurringEvents = event => {\n    const {\n      start,\n      end,\n      recurrence\n    } = event;\n    const startDate = new Date(start);\n    const endDate = new Date(end);\n    const duration = endDate - startDate;\n    const recurringEvents = [event];\n    if (recurrence === 'none') {\n      return recurringEvents;\n    }\n    const maxDate = new Date();\n    maxDate.setFullYear(maxDate.getFullYear() + 1); // Generate events for next year\n\n    let currentDate = new Date(startDate);\n    currentDate.setDate(currentDate.getDate() + 1); // Start from next day\n\n    while (currentDate < maxDate) {\n      const newStart = new Date(currentDate);\n      const newEnd = new Date(newStart.getTime() + duration);\n      recurringEvents.push({\n        ...event,\n        id: `${event.id}_${newStart.toISOString()}`,\n        start: newStart.toISOString(),\n        end: newEnd.toISOString(),\n        date: newStart.toISOString().split('T')[0]\n      });\n      switch (recurrence) {\n        case 'daily':\n          currentDate.setDate(currentDate.getDate() + 1);\n          break;\n        case 'weekly':\n          currentDate.setDate(currentDate.getDate() + 7);\n          break;\n        case 'monthly':\n          currentDate.setMonth(currentDate.getMonth() + 1);\n          break;\n        default:\n          break;\n      }\n    }\n    return recurringEvents;\n  };\n  const addEvent = event => {\n    const recurringEvents = generateRecurringEvents(event);\n    const newEvents = [...events, ...recurringEvents];\n    setEvents(newEvents);\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  const updateEvent = (eventId, updatedEvent) => {\n    // Remove all instances of the recurring event\n    const filteredEvents = events.filter(event => !event.id.startsWith(eventId.split('_')[0]));\n    // Add the updated event with new recurring instances\n    const recurringEvents = generateRecurringEvents(updatedEvent);\n    const newEvents = [...filteredEvents, ...recurringEvents];\n    setEvents(newEvents);\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  const deleteEvent = eventId => {\n    // Remove all instances of the recurring event\n    const newEvents = events.filter(event => !event.id.startsWith(eventId.split('_')[0]));\n    setEvents(newEvents);\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  return {\n    events,\n    addEvent,\n    updateEvent,\n    deleteEvent\n  };\n};\n_s(useEvents, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\nexport default useEvents;","map":{"version":3,"names":["useState","useEffect","useEvents","_s","events","setEvents","storedEvents","localStorage","getItem","JSON","parse","generateRecurringEvents","event","start","end","recurrence","startDate","Date","endDate","duration","recurringEvents","maxDate","setFullYear","getFullYear","currentDate","setDate","getDate","newStart","newEnd","getTime","push","id","toISOString","date","split","setMonth","getMonth","addEvent","newEvents","setItem","stringify","updateEvent","eventId","updatedEvent","filteredEvents","filter","startsWith","deleteEvent"],"sources":["D:/react/reactjs/src/hooks/useEvents.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useEvents = () => {\r\n  const [events, setEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const storedEvents = localStorage.getItem('events');\r\n    if (storedEvents) {\r\n      setEvents(JSON.parse(storedEvents));\r\n    }\r\n  }, []);\r\n\r\n  const generateRecurringEvents = (event) => {\r\n    const { start, end, recurrence } = event;\r\n    const startDate = new Date(start);\r\n    const endDate = new Date(end);\r\n    const duration = endDate - startDate;\r\n    const recurringEvents = [event];\r\n\r\n    if (recurrence === 'none') {\r\n      return recurringEvents;\r\n    }\r\n\r\n    const maxDate = new Date();\r\n    maxDate.setFullYear(maxDate.getFullYear() + 1); // Generate events for next year\r\n\r\n    let currentDate = new Date(startDate);\r\n    currentDate.setDate(currentDate.getDate() + 1); // Start from next day\r\n\r\n    while (currentDate < maxDate) {\r\n      const newStart = new Date(currentDate);\r\n      const newEnd = new Date(newStart.getTime() + duration);\r\n\r\n      recurringEvents.push({\r\n        ...event,\r\n        id: `${event.id}_${newStart.toISOString()}`,\r\n        start: newStart.toISOString(),\r\n        end: newEnd.toISOString(),\r\n        date: newStart.toISOString().split('T')[0]\r\n      });\r\n\r\n      switch (recurrence) {\r\n        case 'daily':\r\n          currentDate.setDate(currentDate.getDate() + 1);\r\n          break;\r\n        case 'weekly':\r\n          currentDate.setDate(currentDate.getDate() + 7);\r\n          break;\r\n        case 'monthly':\r\n          currentDate.setMonth(currentDate.getMonth() + 1);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return recurringEvents;\r\n  };\r\n\r\n  const addEvent = (event) => {\r\n    const recurringEvents = generateRecurringEvents(event);\r\n    const newEvents = [...events, ...recurringEvents];\r\n    setEvents(newEvents);\r\n    localStorage.setItem('events', JSON.stringify(newEvents));\r\n  };\r\n\r\n  const updateEvent = (eventId, updatedEvent) => {\r\n    // Remove all instances of the recurring event\r\n    const filteredEvents = events.filter(event => !event.id.startsWith(eventId.split('_')[0]));\r\n    // Add the updated event with new recurring instances\r\n    const recurringEvents = generateRecurringEvents(updatedEvent);\r\n    const newEvents = [...filteredEvents, ...recurringEvents];\r\n    setEvents(newEvents);\r\n    localStorage.setItem('events', JSON.stringify(newEvents));\r\n  };\r\n\r\n  const deleteEvent = (eventId) => {\r\n    // Remove all instances of the recurring event\r\n    const newEvents = events.filter(event => !event.id.startsWith(eventId.split('_')[0]));\r\n    setEvents(newEvents);\r\n    localStorage.setItem('events', JSON.stringify(newEvents));\r\n  };\r\n\r\n  return { events, addEvent, updateEvent, deleteEvent };\r\n};\r\n\r\nexport default useEvents;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}