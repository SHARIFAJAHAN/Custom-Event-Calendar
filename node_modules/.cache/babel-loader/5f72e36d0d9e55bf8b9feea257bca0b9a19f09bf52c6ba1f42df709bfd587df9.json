{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useEvents = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    const storedEvents = localStorage.getItem('events');\n    if (storedEvents) {\n      setEvents(JSON.parse(storedEvents));\n    }\n  }, []);\n  const generateRecurringEvents = event => {\n    const {\n      start,\n      end,\n      recurrence,\n      title,\n      color\n    } = event;\n    const startDate = new Date(start);\n    const endDate = new Date(end);\n    const duration = endDate - startDate;\n\n    // Create the initial event with proper date\n    const initialEvent = {\n      ...event,\n      id: event.id || Date.now().toString(),\n      date: startDate.toISOString().split('T')[0],\n      start: startDate.toISOString(),\n      end: endDate.toISOString()\n    };\n    const recurringEvents = [initialEvent];\n    if (recurrence === 'none') {\n      return recurringEvents;\n    }\n\n    // Use the event's end date as the maximum date for recurrence\n    const maxDate = new Date(endDate);\n    let currentDate = new Date(startDate);\n    const originalDay = startDate.getDate(); // Store the original day of the month\n\n    // For weekly recurrence, ensure we start from the same day of the week\n    if (recurrence === 'weekly') {\n      currentDate.setDate(currentDate.getDate() + 7);\n    } else if (recurrence === 'monthly') {\n      // For monthly, move to the next month\n      currentDate.setMonth(currentDate.getMonth() + 1);\n      // Ensure we keep the same day of the month\n      currentDate.setDate(originalDay);\n    } else {\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    while (currentDate <= maxDate) {\n      const newStart = new Date(currentDate);\n      const newEnd = new Date(newStart.getTime() + duration);\n\n      // Only add the event if it's a valid recurrence and before the end date\n      if ((recurrence === 'daily' || recurrence === 'weekly' && newStart.getDay() === startDate.getDay() || recurrence === 'monthly' && newStart.getDate() === originalDay) && newStart <= maxDate) {\n        recurringEvents.push({\n          ...event,\n          id: `${event.id || Date.now().toString()}_${newStart.toISOString()}`,\n          title,\n          color,\n          start: newStart.toISOString(),\n          end: newEnd.toISOString(),\n          date: newStart.toISOString().split('T')[0],\n          recurrence\n        });\n      }\n      switch (recurrence) {\n        case 'daily':\n          currentDate.setDate(currentDate.getDate() + 1);\n          break;\n        case 'weekly':\n          currentDate.setDate(currentDate.getDate() + 7);\n          break;\n        case 'monthly':\n          currentDate.setMonth(currentDate.getMonth() + 1);\n          // Ensure we keep the same day of the month\n          currentDate.setDate(originalDay);\n          break;\n        default:\n          break;\n      }\n    }\n    return recurringEvents;\n  };\n  const addEvent = event => {\n    // Ensure all required fields are present and properly formatted\n    const completeEvent = {\n      ...event,\n      color: event.color || '#e0e0e0',\n      recurrence: event.recurrence || 'none',\n      start: new Date(event.start).toISOString(),\n      end: new Date(event.end).toISOString(),\n      date: new Date(event.start).toISOString().split('T')[0]\n    };\n    const recurringEvents = generateRecurringEvents(completeEvent);\n    const newEvents = [...events, ...recurringEvents];\n    setEvents(newEvents);\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  const updateEvent = (eventId, updatedEvent) => {\n    // Remove all instances of the recurring event\n    const baseId = eventId.split('_')[0];\n    const filteredEvents = events.filter(event => !event.id.startsWith(baseId));\n\n    // Add the updated event with new recurring instances\n    const recurringEvents = generateRecurringEvents({\n      ...updatedEvent,\n      id: baseId\n    });\n    const newEvents = [...filteredEvents, ...recurringEvents];\n    setEvents(newEvents);\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  const deleteEvent = eventId => {\n    // Remove all instances of the recurring event\n    const baseId = eventId.split('_')[0];\n    const newEvents = events.filter(event => !event.id.startsWith(baseId));\n    setEvents(newEvents);\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  return {\n    events,\n    addEvent,\n    updateEvent,\n    deleteEvent\n  };\n};\n_s(useEvents, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\nexport default useEvents;","map":{"version":3,"names":["useState","useEffect","useEvents","_s","events","setEvents","storedEvents","localStorage","getItem","JSON","parse","generateRecurringEvents","event","start","end","recurrence","title","color","startDate","Date","endDate","duration","initialEvent","id","now","toString","date","toISOString","split","recurringEvents","maxDate","currentDate","originalDay","getDate","setDate","setMonth","getMonth","newStart","newEnd","getTime","getDay","push","addEvent","completeEvent","newEvents","setItem","stringify","updateEvent","eventId","updatedEvent","baseId","filteredEvents","filter","startsWith","deleteEvent"],"sources":["D:/react/reactjs/src/hooks/useEvents.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useEvents = () => {\r\n  const [events, setEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const storedEvents = localStorage.getItem('events');\r\n    if (storedEvents) {\r\n      setEvents(JSON.parse(storedEvents));\r\n    }\r\n  }, []);\r\n\r\n  const generateRecurringEvents = (event) => {\r\n    const { start, end, recurrence, title, color } = event;\r\n    const startDate = new Date(start);\r\n    const endDate = new Date(end);\r\n    const duration = endDate - startDate;\r\n    \r\n    // Create the initial event with proper date\r\n    const initialEvent = {\r\n      ...event,\r\n      id: event.id || Date.now().toString(),\r\n      date: startDate.toISOString().split('T')[0],\r\n      start: startDate.toISOString(),\r\n      end: endDate.toISOString()\r\n    };\r\n\r\n    const recurringEvents = [initialEvent];\r\n\r\n    if (recurrence === 'none') {\r\n      return recurringEvents;\r\n    }\r\n\r\n    // Use the event's end date as the maximum date for recurrence\r\n    const maxDate = new Date(endDate);\r\n    let currentDate = new Date(startDate);\r\n    const originalDay = startDate.getDate(); // Store the original day of the month\r\n    \r\n    // For weekly recurrence, ensure we start from the same day of the week\r\n    if (recurrence === 'weekly') {\r\n      currentDate.setDate(currentDate.getDate() + 7);\r\n    } else if (recurrence === 'monthly') {\r\n      // For monthly, move to the next month\r\n      currentDate.setMonth(currentDate.getMonth() + 1);\r\n      // Ensure we keep the same day of the month\r\n      currentDate.setDate(originalDay);\r\n    } else {\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n\r\n    while (currentDate <= maxDate) {\r\n      const newStart = new Date(currentDate);\r\n      const newEnd = new Date(newStart.getTime() + duration);\r\n\r\n      // Only add the event if it's a valid recurrence and before the end date\r\n      if ((recurrence === 'daily' || \r\n          (recurrence === 'weekly' && newStart.getDay() === startDate.getDay()) ||\r\n          (recurrence === 'monthly' && newStart.getDate() === originalDay)) &&\r\n          newStart <= maxDate) {\r\n        \r\n        recurringEvents.push({\r\n          ...event,\r\n          id: `${event.id || Date.now().toString()}_${newStart.toISOString()}`,\r\n          title,\r\n          color,\r\n          start: newStart.toISOString(),\r\n          end: newEnd.toISOString(),\r\n          date: newStart.toISOString().split('T')[0],\r\n          recurrence\r\n        });\r\n      }\r\n\r\n      switch (recurrence) {\r\n        case 'daily':\r\n          currentDate.setDate(currentDate.getDate() + 1);\r\n          break;\r\n        case 'weekly':\r\n          currentDate.setDate(currentDate.getDate() + 7);\r\n          break;\r\n        case 'monthly':\r\n          currentDate.setMonth(currentDate.getMonth() + 1);\r\n          // Ensure we keep the same day of the month\r\n          currentDate.setDate(originalDay);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n\r\n    return recurringEvents;\r\n  };\r\n\r\n  const addEvent = (event) => {\r\n    // Ensure all required fields are present and properly formatted\r\n    const completeEvent = {\r\n      ...event,\r\n      color: event.color || '#e0e0e0',\r\n      recurrence: event.recurrence || 'none',\r\n      start: new Date(event.start).toISOString(),\r\n      end: new Date(event.end).toISOString(),\r\n      date: new Date(event.start).toISOString().split('T')[0]\r\n    };\r\n\r\n    const recurringEvents = generateRecurringEvents(completeEvent);\r\n    const newEvents = [...events, ...recurringEvents];\r\n    setEvents(newEvents);\r\n    localStorage.setItem('events', JSON.stringify(newEvents));\r\n  };\r\n\r\n  const updateEvent = (eventId, updatedEvent) => {\r\n    // Remove all instances of the recurring event\r\n    const baseId = eventId.split('_')[0];\r\n    const filteredEvents = events.filter(event => !event.id.startsWith(baseId));\r\n    \r\n    // Add the updated event with new recurring instances\r\n    const recurringEvents = generateRecurringEvents({\r\n      ...updatedEvent,\r\n      id: baseId\r\n    });\r\n    \r\n    const newEvents = [...filteredEvents, ...recurringEvents];\r\n    setEvents(newEvents);\r\n    localStorage.setItem('events', JSON.stringify(newEvents));\r\n  };\r\n\r\n  const deleteEvent = (eventId) => {\r\n    // Remove all instances of the recurring event\r\n    const baseId = eventId.split('_')[0];\r\n    const newEvents = events.filter(event => !event.id.startsWith(baseId));\r\n    setEvents(newEvents);\r\n    localStorage.setItem('events', JSON.stringify(newEvents));\r\n  };\r\n\r\n  return { events, addEvent, updateEvent, deleteEvent };\r\n};\r\n\r\nexport default useEvents;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMK,YAAY,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;IACnD,IAAIF,YAAY,EAAE;MAChBD,SAAS,CAACI,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,CAAC;IACrC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,uBAAuB,GAAIC,KAAK,IAAK;IACzC,MAAM;MAAEC,KAAK;MAAEC,GAAG;MAAEC,UAAU;MAAEC,KAAK;MAAEC;IAAM,CAAC,GAAGL,KAAK;IACtD,MAAMM,SAAS,GAAG,IAAIC,IAAI,CAACN,KAAK,CAAC;IACjC,MAAMO,OAAO,GAAG,IAAID,IAAI,CAACL,GAAG,CAAC;IAC7B,MAAMO,QAAQ,GAAGD,OAAO,GAAGF,SAAS;;IAEpC;IACA,MAAMI,YAAY,GAAG;MACnB,GAAGV,KAAK;MACRW,EAAE,EAAEX,KAAK,CAACW,EAAE,IAAIJ,IAAI,CAACK,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACrCC,IAAI,EAAER,SAAS,CAACS,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAC3Cf,KAAK,EAAEK,SAAS,CAACS,WAAW,CAAC,CAAC;MAC9Bb,GAAG,EAAEM,OAAO,CAACO,WAAW,CAAC;IAC3B,CAAC;IAED,MAAME,eAAe,GAAG,CAACP,YAAY,CAAC;IAEtC,IAAIP,UAAU,KAAK,MAAM,EAAE;MACzB,OAAOc,eAAe;IACxB;;IAEA;IACA,MAAMC,OAAO,GAAG,IAAIX,IAAI,CAACC,OAAO,CAAC;IACjC,IAAIW,WAAW,GAAG,IAAIZ,IAAI,CAACD,SAAS,CAAC;IACrC,MAAMc,WAAW,GAAGd,SAAS,CAACe,OAAO,CAAC,CAAC,CAAC,CAAC;;IAEzC;IACA,IAAIlB,UAAU,KAAK,QAAQ,EAAE;MAC3BgB,WAAW,CAACG,OAAO,CAACH,WAAW,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAChD,CAAC,MAAM,IAAIlB,UAAU,KAAK,SAAS,EAAE;MACnC;MACAgB,WAAW,CAACI,QAAQ,CAACJ,WAAW,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;MAChD;MACAL,WAAW,CAACG,OAAO,CAACF,WAAW,CAAC;IAClC,CAAC,MAAM;MACLD,WAAW,CAACG,OAAO,CAACH,WAAW,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAChD;IAEA,OAAOF,WAAW,IAAID,OAAO,EAAE;MAC7B,MAAMO,QAAQ,GAAG,IAAIlB,IAAI,CAACY,WAAW,CAAC;MACtC,MAAMO,MAAM,GAAG,IAAInB,IAAI,CAACkB,QAAQ,CAACE,OAAO,CAAC,CAAC,GAAGlB,QAAQ,CAAC;;MAEtD;MACA,IAAI,CAACN,UAAU,KAAK,OAAO,IACtBA,UAAU,KAAK,QAAQ,IAAIsB,QAAQ,CAACG,MAAM,CAAC,CAAC,KAAKtB,SAAS,CAACsB,MAAM,CAAC,CAAE,IACpEzB,UAAU,KAAK,SAAS,IAAIsB,QAAQ,CAACJ,OAAO,CAAC,CAAC,KAAKD,WAAY,KAChEK,QAAQ,IAAIP,OAAO,EAAE;QAEvBD,eAAe,CAACY,IAAI,CAAC;UACnB,GAAG7B,KAAK;UACRW,EAAE,EAAE,GAAGX,KAAK,CAACW,EAAE,IAAIJ,IAAI,CAACK,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,IAAIY,QAAQ,CAACV,WAAW,CAAC,CAAC,EAAE;UACpEX,KAAK;UACLC,KAAK;UACLJ,KAAK,EAAEwB,QAAQ,CAACV,WAAW,CAAC,CAAC;UAC7Bb,GAAG,EAAEwB,MAAM,CAACX,WAAW,CAAC,CAAC;UACzBD,IAAI,EAAEW,QAAQ,CAACV,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UAC1Cb;QACF,CAAC,CAAC;MACJ;MAEA,QAAQA,UAAU;QAChB,KAAK,OAAO;UACVgB,WAAW,CAACG,OAAO,CAACH,WAAW,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;UAC9C;QACF,KAAK,QAAQ;UACXF,WAAW,CAACG,OAAO,CAACH,WAAW,CAACE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;UAC9C;QACF,KAAK,SAAS;UACZF,WAAW,CAACI,QAAQ,CAACJ,WAAW,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;UAChD;UACAL,WAAW,CAACG,OAAO,CAACF,WAAW,CAAC;UAChC;QACF;UACE;MACJ;IACF;IAEA,OAAOH,eAAe;EACxB,CAAC;EAED,MAAMa,QAAQ,GAAI9B,KAAK,IAAK;IAC1B;IACA,MAAM+B,aAAa,GAAG;MACpB,GAAG/B,KAAK;MACRK,KAAK,EAAEL,KAAK,CAACK,KAAK,IAAI,SAAS;MAC/BF,UAAU,EAAEH,KAAK,CAACG,UAAU,IAAI,MAAM;MACtCF,KAAK,EAAE,IAAIM,IAAI,CAACP,KAAK,CAACC,KAAK,CAAC,CAACc,WAAW,CAAC,CAAC;MAC1Cb,GAAG,EAAE,IAAIK,IAAI,CAACP,KAAK,CAACE,GAAG,CAAC,CAACa,WAAW,CAAC,CAAC;MACtCD,IAAI,EAAE,IAAIP,IAAI,CAACP,KAAK,CAACC,KAAK,CAAC,CAACc,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,MAAMC,eAAe,GAAGlB,uBAAuB,CAACgC,aAAa,CAAC;IAC9D,MAAMC,SAAS,GAAG,CAAC,GAAGxC,MAAM,EAAE,GAAGyB,eAAe,CAAC;IACjDxB,SAAS,CAACuC,SAAS,CAAC;IACpBrC,YAAY,CAACsC,OAAO,CAAC,QAAQ,EAAEpC,IAAI,CAACqC,SAAS,CAACF,SAAS,CAAC,CAAC;EAC3D,CAAC;EAED,MAAMG,WAAW,GAAGA,CAACC,OAAO,EAAEC,YAAY,KAAK;IAC7C;IACA,MAAMC,MAAM,GAAGF,OAAO,CAACpB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpC,MAAMuB,cAAc,GAAG/C,MAAM,CAACgD,MAAM,CAACxC,KAAK,IAAI,CAACA,KAAK,CAACW,EAAE,CAAC8B,UAAU,CAACH,MAAM,CAAC,CAAC;;IAE3E;IACA,MAAMrB,eAAe,GAAGlB,uBAAuB,CAAC;MAC9C,GAAGsC,YAAY;MACf1B,EAAE,EAAE2B;IACN,CAAC,CAAC;IAEF,MAAMN,SAAS,GAAG,CAAC,GAAGO,cAAc,EAAE,GAAGtB,eAAe,CAAC;IACzDxB,SAAS,CAACuC,SAAS,CAAC;IACpBrC,YAAY,CAACsC,OAAO,CAAC,QAAQ,EAAEpC,IAAI,CAACqC,SAAS,CAACF,SAAS,CAAC,CAAC;EAC3D,CAAC;EAED,MAAMU,WAAW,GAAIN,OAAO,IAAK;IAC/B;IACA,MAAME,MAAM,GAAGF,OAAO,CAACpB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACpC,MAAMgB,SAAS,GAAGxC,MAAM,CAACgD,MAAM,CAACxC,KAAK,IAAI,CAACA,KAAK,CAACW,EAAE,CAAC8B,UAAU,CAACH,MAAM,CAAC,CAAC;IACtE7C,SAAS,CAACuC,SAAS,CAAC;IACpBrC,YAAY,CAACsC,OAAO,CAAC,QAAQ,EAAEpC,IAAI,CAACqC,SAAS,CAACF,SAAS,CAAC,CAAC;EAC3D,CAAC;EAED,OAAO;IAAExC,MAAM;IAAEsC,QAAQ;IAAEK,WAAW;IAAEO;EAAY,CAAC;AACvD,CAAC;AAACnD,EAAA,CApIID,SAAS;AAsIf,eAAeA,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}